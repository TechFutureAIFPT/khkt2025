import React, { useState, useEffect } from 'react';
import { DataSyncService } from '../../services/dataSyncService';
import { auth } from '../../src/firebase';
import { User } from 'firebase/auth';

interface DataSyncManagerProps {
  user: User | null;
  onSyncComplete?: () => void;
}

interface SyncStats {
  cacheEntries: number;
  historyEntries: number;
  lastSyncTime: Date | null;
}

const DataSyncManager: React.FC<DataSyncManagerProps> = ({ user, onSyncComplete }) => {
  const [isSync, setIsSync] = useState(false);
  const [syncProgress, setSyncProgress] = useState('');
  const [syncStats, setSyncStats] = useState<SyncStats>({
    cacheEntries: 0,
    historyEntries: 0,
    lastSyncTime: null
  });
  const [showDetails, setShowDetails] = useState(false);

  useEffect(() => {
    if (user) {
      loadSyncStats();
      handleUserLogin();
    }
  }, [user]);

  const loadSyncStats = async () => {
    try {
      const stats = await DataSyncService.getSyncStats();
      setSyncStats(stats);
    } catch (error) {
      console.error('Failed to load sync stats:', error);
    }
  };

  const handleUserLogin = async () => {
    if (!user) return;

    setIsSync(true);
    setSyncProgress('Đang kiểm tra dữ liệu cần đồng bộ...');

    try {
      // Kiểm tra xem có dữ liệu local cần migrate không
      const hasLocalCache = localStorage.getItem('cvAnalysisCache');
      const hasLocalHistory = localStorage.getItem('cvAnalysis.latest') || 
                              localStorage.getItem('analysisHistory') || 
                              localStorage.getItem('cvFilterHistory');

      if (hasLocalCache || hasLocalHistory) {
        setSyncProgress('Đang đồng bộ dữ liệu local lên cloud...');
        await DataSyncService.migrateLocalDataToFirebase();
        setSyncProgress('Đồng bộ lên cloud hoàn tất!');
      }

      // Load dữ liệu từ Firebase về
      setSyncProgress('Đang tải dữ liệu từ cloud...');
      await DataSyncService.loadDataFromFirebase();
      setSyncProgress('Tải dữ liệu hoàn tất!');

      // Cập nhật stats
      await loadSyncStats();

      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
        onSyncComplete?.();
      }, 1000);

    } catch (error) {
      console.error('Sync error:', error);
      setSyncProgress('Có lỗi xảy ra khi đồng bộ dữ liệu');
      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
      }, 3000);
    }
  };

  const handleManualSync = async () => {
    if (!user) return;

    setIsSync(true);
    setSyncProgress('Đang đồng bộ thủ công...');

    try {
      await DataSyncService.migrateLocalDataToFirebase();
      await DataSyncService.loadDataFromFirebase();
      await loadSyncStats();
      
      setSyncProgress('Đồng bộ hoàn tất!');
      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
      }, 1000);
    } catch (error) {
      console.error('Manual sync error:', error);
      setSyncProgress('Có lỗi xảy ra');
      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
      }, 3000);
    }
  };

  const handleClearSyncedData = async () => {
    if (!user || !confirm('Bạn có chắc muốn xóa tất cả dữ liệu đã đồng bộ? Hành động này không thể hoàn tác.')) return;

    setIsSync(true);
    setSyncProgress('Đang xóa dữ liệu đã đồng bộ...');

    try {
      await DataSyncService.clearUserSyncedData();
      await loadSyncStats();
      
      setSyncProgress('Đã xóa dữ liệu!');
      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
      }, 1000);
    } catch (error) {
      console.error('Clear data error:', error);
      setSyncProgress('Có lỗi xảy ra');
      setTimeout(() => {
        setIsSync(false);
        setSyncProgress('');
      }, 3000);
    }
  };

  if (!user) {
    return (
      <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-4">
        <div className="flex items-center gap-3 text-slate-400">
          <i className="fa-solid fa-cloud-slash text-xl"></i>
          <div>
            <div className="font-semibold">Chưa đăng nhập</div>
            <div className="text-sm">Đăng nhập để đồng bộ dữ liệu giữa các thiết bị</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-4">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className={`w-3 h-3 rounded-full ${isSync ? 'bg-blue-400 animate-pulse' : 'bg-green-400'}`}></div>
          <div>
            <div className="font-semibold text-white">Đồng bộ dữ liệu</div>
            <div className="text-sm text-slate-400">
              {isSync ? syncProgress : 'Dữ liệu đã được đồng bộ với tài khoản Gmail'}
            </div>
          </div>
        </div>
        
        <button
          onClick={() => setShowDetails(!showDetails)}
          className="text-slate-400 hover:text-white transition-colors p-2"
        >
          <i className={`fa-solid fa-chevron-${showDetails ? 'up' : 'down'}`}></i>
        </button>
      </div>

      {isSync && (
        <div className="mb-4">
          <div className="bg-slate-700 rounded-full h-2 overflow-hidden">
            <div className="bg-blue-500 h-full rounded-full animate-pulse" style={{width: '100%'}}></div>
          </div>
        </div>
      )}

      {showDetails && (
        <div className="space-y-4 border-t border-slate-700 pt-4">
          {/* Sync Statistics */}
          <div>
            <h4 className="font-semibold text-white mb-2">Thống kê đồng bộ</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="bg-slate-700/50 rounded-lg p-3">
                <div className="text-slate-400">Cache entries</div>
                <div className="text-white font-semibold">{syncStats.cacheEntries}</div>
              </div>
              <div className="bg-slate-700/50 rounded-lg p-3">
                <div className="text-slate-400">History entries</div>
                <div className="text-white font-semibold">{syncStats.historyEntries}</div>
              </div>
            </div>
            
            {syncStats.lastSyncTime && (
              <div className="mt-2 text-xs text-slate-400">
                Lần đồng bộ cuối: {syncStats.lastSyncTime.toLocaleString('vi-VN')}
              </div>
            )}
          </div>

          {/* Sync Actions */}
          <div className="flex gap-2">
            <button
              onClick={handleManualSync}
              disabled={isSync}
              className="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-slate-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors disabled:cursor-not-allowed"
            >
              <i className="fa-solid fa-sync-alt mr-2"></i>
              Đồng bộ thủ công
            </button>
            
            <button
              onClick={handleClearSyncedData}
              disabled={isSync}
              className="bg-red-600 hover:bg-red-700 disabled:bg-slate-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors disabled:cursor-not-allowed"
            >
              <i className="fa-solid fa-trash mr-2"></i>
              Xóa dữ liệu
            </button>
          </div>

          {/* Help Text */}
          <div className="bg-blue-900/20 border border-blue-700/30 rounded-lg p-3">
            <div className="text-blue-300 text-sm">
              <div className="font-semibold mb-1">
                <i className="fa-solid fa-info-circle mr-1"></i>
                Cách hoạt động:
              </div>
              <ul className="space-y-1 text-xs">
                <li>• Cache phân tích CV và lịch sử được đồng bộ với tài khoản Gmail</li>
                <li>• Dữ liệu sẽ có sẵn khi đăng nhập trên thiết bị khác</li>
                <li>• Tự động đồng bộ khi đăng nhập và khi có dữ liệu mới</li>
                <li>• Dữ liệu được mã hóa và bảo mật trên Firebase</li>
              </ul>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DataSyncManager;